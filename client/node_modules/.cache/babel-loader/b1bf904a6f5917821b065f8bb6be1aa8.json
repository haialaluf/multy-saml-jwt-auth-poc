{"ast":null,"code":"var _jsxFileName = \"/Users/haialaluf/Workspace/Achiad/Aleph/React-Okta-SAML/client/OLD/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [email, setEmail] = useState(\"\");\n\n  // useEffect(() => {\n  //   logging.info(\"checking authentication by calling /me\");\n\n  //   axios\n  //     .get(\"http://localhost:5000/me\", {\n  //       withCredentials: true,\n  //     })\n  //     .then((res) => {\n  //       logging.info(res.data.user, \"/me\");\n\n  //       /**\n  //        * if user has no nameID it means that he is not authenticated yet!\n  //        * redirect to login for Okta auth\n  //        */\n  //       if (res.data.user.nameID) {\n  //         setEmail(res.data.user.nameID);\n  //         setLoading(false);\n  //       } else {\n  //         redirectToLogin();\n  //       }\n  //     })\n  //     .catch((err) => {\n  //       logging.error(err, \"/me\");\n  //       redirectToLogin();\n  //     });\n  // }, []);\n\n  // // Redirect to login\n  // const redirectToLogin = () => {\n  //   window.location.replace(\"http://localhost:5000/login\");\n  // };\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"This is react running on my local machine\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Woho! \", email, \" is now authenticated via Okta.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 10\n  }, this);\n};\n_s(App, \"jcvgJ7NkAh+lUnsEW6g+hKW7XC8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","loading","setLoading","email","setEmail","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/haialaluf/Workspace/Achiad/Aleph/React-Okta-SAML/client/OLD/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport logging from \"./config/logging\";\nimport axios from \"axios\";\n\nconst App: React.FunctionComponent = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [email, setEmail] = useState<string>(\"\");\n\n  // useEffect(() => {\n  //   logging.info(\"checking authentication by calling /me\");\n\n  //   axios\n  //     .get(\"http://localhost:5000/me\", {\n  //       withCredentials: true,\n  //     })\n  //     .then((res) => {\n  //       logging.info(res.data.user, \"/me\");\n\n  //       /**\n  //        * if user has no nameID it means that he is not authenticated yet!\n  //        * redirect to login for Okta auth\n  //        */\n  //       if (res.data.user.nameID) {\n  //         setEmail(res.data.user.nameID);\n  //         setLoading(false);\n  //       } else {\n  //         redirectToLogin();\n  //       }\n  //     })\n  //     .catch((err) => {\n  //       logging.error(err, \"/me\");\n  //       redirectToLogin();\n  //     });\n  // }, []);\n\n  // // Redirect to login\n  // const redirectToLogin = () => {\n  //   window.location.replace(\"http://localhost:5000/login\");\n  // };\n\n  if (loading) return <p>This is react running on my local machine</p>;\n  return <p>Woho! {email} is now authenticated via Okta.</p>;\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAeC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAInD,MAAMC,GAA4B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAS,EAAE,CAAC;;EAE9C;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA,IAAIK,OAAO,EAAE,oBAAOH,OAAA;IAAAO,QAAA,EAAG;EAAyC;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EACpE,oBAAOX,OAAA;IAAAO,QAAA,GAAG,QAAM,EAACF,KAAK,EAAC,iCAA+B;EAAA;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;AAC5D,CAAC;AAACT,EAAA,CAtCID,GAA4B;AAAAW,EAAA,GAA5BX,GAA4B;AAwClC,eAAeA,GAAG;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}