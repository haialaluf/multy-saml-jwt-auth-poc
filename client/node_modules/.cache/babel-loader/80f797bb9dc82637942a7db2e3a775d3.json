{"ast":null,"code":"import { DEFAULT_NAMESPACE } from \"./constants\";\nconst info = (message, namespace) => {\n  if (typeof message === \"string\") {\n    console.log(`[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [INFO] ${message}`);\n  } else {\n    console.log(`[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [INFO]`, message);\n  }\n};\nconst warn = (message, namespace) => {\n  if (typeof message === \"string\") {\n    console.log(`[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [WARN] ${message}`);\n  } else {\n    console.log(`[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [WARN]`, message);\n  }\n};\nconst error = (message, namespace) => {\n  if (typeof message === \"string\") {\n    console.log(`[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [ERROR] ${message}`);\n  } else {\n    console.log(`[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [ERROR]`, message);\n  }\n};\nconst getDate = () => {\n  return new Date().toISOString();\n};\nexport default {\n  info,\n  warn,\n  error\n};","map":{"version":3,"names":["DEFAULT_NAMESPACE","info","message","namespace","console","log","getDate","warn","error","Date","toISOString"],"sources":["/Users/haialaluf/Workspace/Achiad/Aleph/React-Okta-SAML/client/OLD/src/config/logging.ts"],"sourcesContent":["import { DEFAULT_NAMESPACE } from \"./constants\";\n\nconst info = (message: any, namespace?: string) => {\n  if (typeof message === \"string\") {\n    console.log(\n      `[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [INFO] ${message}`\n    );\n  } else {\n    console.log(\n      `[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [INFO]`,\n      message\n    );\n  }\n};\n\nconst warn = (message: any, namespace?: string) => {\n  if (typeof message === \"string\") {\n    console.log(\n      `[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [WARN] ${message}`\n    );\n  } else {\n    console.log(\n      `[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [WARN]`,\n      message\n    );\n  }\n};\n\nconst error = (message: any, namespace?: string) => {\n  if (typeof message === \"string\") {\n    console.log(\n      `[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [ERROR] ${message}`\n    );\n  } else {\n    console.log(\n      `[${getDate()}] [${namespace || DEFAULT_NAMESPACE}] [ERROR]`,\n      message\n    );\n  }\n};\n\nconst getDate = () => {\n  return new Date().toISOString();\n};\n\nexport default { info, warn, error };\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,aAAa;AAE/C,MAAMC,IAAI,GAAGA,CAACC,OAAY,EAAEC,SAAkB,KAAK;EACjD,IAAI,OAAOD,OAAO,KAAK,QAAQ,EAAE;IAC/BE,OAAO,CAACC,GAAG,CACR,IAAGC,OAAO,CAAC,CAAE,MAAKH,SAAS,IAAIH,iBAAkB,YAAWE,OAAQ,EACvE,CAAC;EACH,CAAC,MAAM;IACLE,OAAO,CAACC,GAAG,CACR,IAAGC,OAAO,CAAC,CAAE,MAAKH,SAAS,IAAIH,iBAAkB,UAAS,EAC3DE,OACF,CAAC;EACH;AACF,CAAC;AAED,MAAMK,IAAI,GAAGA,CAACL,OAAY,EAAEC,SAAkB,KAAK;EACjD,IAAI,OAAOD,OAAO,KAAK,QAAQ,EAAE;IAC/BE,OAAO,CAACC,GAAG,CACR,IAAGC,OAAO,CAAC,CAAE,MAAKH,SAAS,IAAIH,iBAAkB,YAAWE,OAAQ,EACvE,CAAC;EACH,CAAC,MAAM;IACLE,OAAO,CAACC,GAAG,CACR,IAAGC,OAAO,CAAC,CAAE,MAAKH,SAAS,IAAIH,iBAAkB,UAAS,EAC3DE,OACF,CAAC;EACH;AACF,CAAC;AAED,MAAMM,KAAK,GAAGA,CAACN,OAAY,EAAEC,SAAkB,KAAK;EAClD,IAAI,OAAOD,OAAO,KAAK,QAAQ,EAAE;IAC/BE,OAAO,CAACC,GAAG,CACR,IAAGC,OAAO,CAAC,CAAE,MAAKH,SAAS,IAAIH,iBAAkB,aAAYE,OAAQ,EACxE,CAAC;EACH,CAAC,MAAM;IACLE,OAAO,CAACC,GAAG,CACR,IAAGC,OAAO,CAAC,CAAE,MAAKH,SAAS,IAAIH,iBAAkB,WAAU,EAC5DE,OACF,CAAC;EACH;AACF,CAAC;AAED,MAAMI,OAAO,GAAGA,CAAA,KAAM;EACpB,OAAO,IAAIG,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;AACjC,CAAC;AAED,eAAe;EAAET,IAAI;EAAEM,IAAI;EAAEC;AAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}