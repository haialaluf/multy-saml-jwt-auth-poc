{"ast":null,"code":"var _jsxFileName = \"/Users/haialaluf/Workspace/Achiad/Aleph/React-Okta-SAML/client/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport logging from \"./config/logging\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [email, setEmail] = useState(\"\");\n  useEffect(() => {\n    window.tryme = () => {\n      logging.info(\"checking authentication by calling /me\");\n      axios.get(\"https://woodcock-more-arguably.ngrok-free.app/me\", {\n        withCredentials: true\n      }).then(res => {\n        logging.info(res.data.user, \"/me\");\n\n        /**\n         * if user has no nameID it means that he is not authenticated yet!\n         * redirect to login for Okta auth\n         */\n        if (res.data.user.nameID) {\n          setEmail(res.data.user.nameID);\n          setLoading(false);\n        } else {\n          redirectToLogin();\n        }\n      }).catch(err => {\n        logging.error(err, \"/me\");\n        redirectToLogin();\n      });\n    };\n    window.tryme();\n  }, []);\n\n  // Redirect to login\n  const redirectToLogin = () => {\n    axios.get(\"https://woodcock-more-arguably.ngrok-free.app/login\", {\n      withCredentials: true\n    });\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Woho! \", email, \" is now authenticated via Okta.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 10\n  }, this);\n};\n_s(App, \"vAaWNfYrNhCuywAiVcogyLGbMUw=\");\n_c = App;\nexport default App;\n\n/**\n * import React, { useEffect, useState } from \"react\";\nimport logging from \"./config/logging\";\nimport axios from \"axios\";\n\nconst App: React.FunctionComponent = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [email, setEmail] = useState<string>(\"\");\n\n  const tryFetch = () => {\n    axios\n      .get(\"https://woodcock-more-arguably.ngrok-free.app/me\", {\n        withCredentials: true,\n      })\n      .then((res) => {\n        logging.info(res.data.user, \"/me\");\n\n\n        if (res.data.user.nameID) {\n          setEmail(res.data.user.nameID);\n          setLoading(false);\n        } else {\n          redirectToLogin(email);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        logging.error(err, \"/me\");\n      });\n  }\n  useEffect(() => {\n    logging.info(\"checking authentication by calling /me\");\n    tryFetch();\n\n  }, []);\n\n  // Redirect to login\n  const redirectToLogin = (email: string) => {\n    \n    axios\n      .get(\"https://woodcock-more-arguably.ngrok-free.app/login\", {\n        withCredentials: true,\n      }).then((res) => {\n        logging.info(res.data, \"/login\");\n      });\n  };\n\n  if (loading) return <p>loading...</p>;\n  return <div>\n    <input type=\"email\" onChange={(e) => setEmail(e.target.value)}/>\n    <div onClick={() => redirectToLogin(email)}>login</div>\n    <div onClick={tryFetch}>try again</div>\n  </div>;\n};\n\nexport default App;\n\n */\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","logging","axios","jsxDEV","_jsxDEV","App","_s","loading","setLoading","email","setEmail","window","tryme","info","get","withCredentials","then","res","data","user","nameID","redirectToLogin","catch","err","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/haialaluf/Workspace/Achiad/Aleph/React-Okta-SAML/client/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport logging from \"./config/logging\";\nimport axios from \"axios\";\n\nconst App: React.FunctionComponent = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [email, setEmail] = useState<string>(\"\");\n\n  useEffect(() => {\n    (window as any).tryme = () => {\n      logging.info(\"checking authentication by calling /me\");\n  \n      axios\n        .get(\"https://woodcock-more-arguably.ngrok-free.app/me\", {\n          withCredentials: true,\n        })\n        .then((res) => {\n          logging.info(res.data.user, \"/me\");\n  \n          /**\n           * if user has no nameID it means that he is not authenticated yet!\n           * redirect to login for Okta auth\n           */\n          if (res.data.user.nameID) {\n            setEmail(res.data.user.nameID);\n            setLoading(false);\n          } else {\n            redirectToLogin();\n          }\n        })\n        .catch((err) => {\n          logging.error(err, \"/me\");\n          redirectToLogin();\n        });\n    }\n    (window as any).tryme()\n  \n  }, []);\n\n  // Redirect to login\n  const redirectToLogin = () => {\n    axios\n      .get(\"https://woodcock-more-arguably.ngrok-free.app/login\", {\n        withCredentials: true,\n      })\n  };\n\n  if (loading) return <p>loading...</p>;\n  return <p>Woho! {email} is now authenticated via Okta.</p>;\n};\n\nexport default App;\n\n\n\n/**\n * import React, { useEffect, useState } from \"react\";\nimport logging from \"./config/logging\";\nimport axios from \"axios\";\n\nconst App: React.FunctionComponent = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [email, setEmail] = useState<string>(\"\");\n\n  const tryFetch = () => {\n    axios\n      .get(\"https://woodcock-more-arguably.ngrok-free.app/me\", {\n        withCredentials: true,\n      })\n      .then((res) => {\n        logging.info(res.data.user, \"/me\");\n\n\n        if (res.data.user.nameID) {\n          setEmail(res.data.user.nameID);\n          setLoading(false);\n        } else {\n          redirectToLogin(email);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        logging.error(err, \"/me\");\n      });\n  }\n  useEffect(() => {\n    logging.info(\"checking authentication by calling /me\");\n    tryFetch();\n\n  }, []);\n\n  // Redirect to login\n  const redirectToLogin = (email: string) => {\n    \n    axios\n      .get(\"https://woodcock-more-arguably.ngrok-free.app/login\", {\n        withCredentials: true,\n      }).then((res) => {\n        logging.info(res.data, \"/login\");\n      });\n  };\n\n  if (loading) return <p>loading...</p>;\n  return <div>\n    <input type=\"email\" onChange={(e) => setEmail(e.target.value)}/>\n    <div onClick={() => redirectToLogin(email)}>login</div>\n    <div onClick={tryFetch}>try again</div>\n  </div>;\n};\n\nexport default App;\n\n */"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,GAA4B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAS,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACbY,MAAM,CAASC,KAAK,GAAG,MAAM;MAC5BX,OAAO,CAACY,IAAI,CAAC,wCAAwC,CAAC;MAEtDX,KAAK,CACFY,GAAG,CAAC,kDAAkD,EAAE;QACvDC,eAAe,EAAE;MACnB,CAAC,CAAC,CACDC,IAAI,CAAEC,GAAG,IAAK;QACbhB,OAAO,CAACY,IAAI,CAACI,GAAG,CAACC,IAAI,CAACC,IAAI,EAAE,KAAK,CAAC;;QAElC;AACV;AACA;AACA;QACU,IAAIF,GAAG,CAACC,IAAI,CAACC,IAAI,CAACC,MAAM,EAAE;UACxBV,QAAQ,CAACO,GAAG,CAACC,IAAI,CAACC,IAAI,CAACC,MAAM,CAAC;UAC9BZ,UAAU,CAAC,KAAK,CAAC;QACnB,CAAC,MAAM;UACLa,eAAe,CAAC,CAAC;QACnB;MACF,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAK;QACdtB,OAAO,CAACuB,KAAK,CAACD,GAAG,EAAE,KAAK,CAAC;QACzBF,eAAe,CAAC,CAAC;MACnB,CAAC,CAAC;IACN,CAAC;IACAV,MAAM,CAASC,KAAK,CAAC,CAAC;EAEzB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMS,eAAe,GAAGA,CAAA,KAAM;IAC5BnB,KAAK,CACFY,GAAG,CAAC,qDAAqD,EAAE;MAC1DC,eAAe,EAAE;IACnB,CAAC,CAAC;EACN,CAAC;EAED,IAAIR,OAAO,EAAE,oBAAOH,OAAA;IAAAqB,QAAA,EAAG;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EACrC,oBAAOzB,OAAA;IAAAqB,QAAA,GAAG,QAAM,EAAChB,KAAK,EAAC,iCAA+B;EAAA;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;AAC5D,CAAC;AAACvB,EAAA,CA7CID,GAA4B;AAAAyB,EAAA,GAA5BzB,GAA4B;AA+ClC,eAAeA,GAAG;;AAIlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzDA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}